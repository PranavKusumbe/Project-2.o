const PDFDocument = require('pdfkit');
const { pool } = require('../config/database');

// Generate notes for educational content
exports.generateContentNotes = async (req, res) => {
  try {
    const { contentId } = req.params;

    // Get content details
    const [content] = await pool.query(
      'SELECT * FROM educational_content WHERE id = ?',
      [contentId]
    );

    if (content.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Content not found' 
      });
    }

    const item = content[0];

    // Create PDF document
    const doc = new PDFDocument({ margin: 50 });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="notes-${item.topic.replace(/\s+/g, '-')}.pdf"`);

    // Pipe PDF to response
    doc.pipe(res);

    // Add content to PDF
    doc.fontSize(24).font('Helvetica-Bold').text('MahaLearn - Study Notes', { align: 'center' });
    doc.moveDown();

    doc.fontSize(18).font('Helvetica-Bold').text(item.topic);
    doc.moveDown(0.5);

    doc.fontSize(12).font('Helvetica').fillColor('gray')
      .text(`Subject: ${item.subject} | Standard: ${item.standard} | Source: ${item.source}`);
    doc.moveDown();

    doc.fillColor('black').fontSize(14).font('Helvetica-Bold').text('Description:');
    doc.fontSize(12).font('Helvetica').text(item.description || 'No description available', { align: 'justify' });
    doc.moveDown();

    // Add content URLs
    if (item.video_url) {
      doc.fontSize(14).font('Helvetica-Bold').text('Video Resource:');
      doc.fontSize(10).font('Helvetica').fillColor('blue').text(item.video_url, { link: item.video_url });
      doc.fillColor('black');
      doc.moveDown();
    }

    // Add key points section
    doc.fontSize(14).font('Helvetica-Bold').text('Key Learning Points:');
    doc.moveDown(0.5);

    const keyPoints = [
      `Study this ${item.subject} topic thoroughly for Standard ${item.standard}.`,
      'Watch the video carefully and take notes.',
      'Practice related exercises from your textbook.',
      'Discuss doubts with your teacher.',
      'Revise regularly for better retention.'
    ];

    keyPoints.forEach((point, index) => {
      doc.fontSize(12).font('Helvetica')
        .text(`${index + 1}. ${point}`, { indent: 20 });
      doc.moveDown(0.3);
    });

    doc.moveDown();
    doc.fontSize(14).font('Helvetica-Bold').text('Study Tips:');
    doc.moveDown(0.5);

    const studyTips = [
      'Create mind maps for better understanding',
      'Practice previous year questions',
      'Make summary notes in your own words',
      'Form study groups with classmates',
      'Take regular breaks while studying'
    ];

    studyTips.forEach((tip, index) => {
      doc.fontSize(12).font('Helvetica')
        .text(`• ${tip}`, { indent: 20 });
      doc.moveDown(0.3);
    });

    // Add footer
    doc.moveDown(2);
    doc.fontSize(10).fillColor('gray').font('Helvetica-Oblique')
      .text('Generated by MahaLearn - Smart Learning Platform', { align: 'center' });
    doc.text(`Maharashtra Board | Standard ${item.standard}`, { align: 'center' });
    if (item.duration_minutes) {
      doc.text(`Duration: ${item.duration_minutes} minutes`, { align: 'center' });
    }

    // Finalize PDF
    doc.end();

  } catch (error) {
    console.error('Generate content notes error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to generate notes', 
      error: error.message 
    });
  }
};

// Generate notes for a test
exports.generateTestNotes = async (req, res) => {
  try {
    const { testId } = req.params;

    // Get test details
    const [tests] = await pool.query(
      'SELECT * FROM tests WHERE id = ?',
      [testId]
    );

    if (tests.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Test not found' 
      });
    }

    const test = tests[0];
    const questions = JSON.parse(test.questions);

    // Create PDF document
    const doc = new PDFDocument({ margin: 50 });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="notes-${test.title.replace(/\s+/g, '-')}.pdf"`);

    // Pipe PDF to response
    doc.pipe(res);

    // Add content to PDF
    doc.fontSize(24).font('Helvetica-Bold').text('MahaLearn - Test Notes', { align: 'center' });
    doc.moveDown();

    doc.fontSize(18).font('Helvetica-Bold').text(test.title);
    doc.moveDown(0.5);

    doc.fontSize(12).font('Helvetica').fillColor('gray')
      .text(`Subject: ${test.subject} | Standard: ${test.std} | Total Marks: ${test.total_marks}`);
    doc.moveDown();

    doc.fillColor('black').fontSize(14).font('Helvetica-Bold').text('Test Questions and Answers:');
    doc.moveDown();

    // Add questions with answers
    questions.forEach((q, index) => {
      doc.fontSize(12).font('Helvetica-Bold').text(`Question ${index + 1}: ${q.question}`);
      doc.moveDown(0.3);

      q.options.forEach((option, optIndex) => {
        const prefix = ['A', 'B', 'C', 'D'][optIndex];
        const isCorrect = optIndex === q.correctAnswer;
        if (isCorrect) {
          doc.font('Helvetica-Bold').fillColor('green').text(`   ${prefix}. ${option} ✓`, { indent: 20 });
        } else {
          doc.font('Helvetica').fillColor('black').text(`   ${prefix}. ${option}`, { indent: 20 });
        }
        doc.moveDown(0.2);
      });
      doc.moveDown(0.5);
    });

    // Add study tips
    doc.moveDown();
    doc.fontSize(14).font('Helvetica-Bold').fillColor('black').text('Study Tips:');
    doc.moveDown(0.5);

    const studyTips = [
      'Understand the concepts instead of memorizing',
      'Practice similar questions from your textbook',
      'Time yourself while solving practice tests',
      'Review incorrect answers to avoid mistakes',
      'Stay calm and read questions carefully during tests'
    ];

    studyTips.forEach((tip, index) => {
      doc.fontSize(12).font('Helvetica')
        .text(`• ${tip}`, { indent: 20 });
      doc.moveDown(0.3);
    });

    // Add footer
    doc.moveDown(2);
    doc.fontSize(10).fillColor('gray').font('Helvetica-Oblique')
      .text('Generated by MahaLearn - Smart Learning Platform', { align: 'center' });

    // Finalize PDF
    doc.end();

  } catch (error) {
    console.error('Generate test notes error:', error);
    res.status(500).json({ 
      success: false, 
      message: 'Failed to generate notes', 
      error: error.message 
    });
  }
};

// Generate notes for a chapter (videos + tests)
exports.generateChapterNotes = async (req, res) => {
  try {
    const { chapterId } = req.body;

    if (!chapterId) {
      return res.status(400).json({ 
        success: false, 
        message: 'Chapter ID is required' 
      });
    }

    // Get chapter details with subject info
    const [chapters] = await pool.query(
      `SELECT c.*, s.name as subject_name, s.standard
       FROM chapters c
       JOIN subjects s ON c.subject_id = s.id
       WHERE c.id = ?`,
      [chapterId]
    );

    if (chapters.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: 'Chapter not found' 
      });
    }

    const chapter = chapters[0];

    // Get videos for this chapter
    const [videos] = await pool.query(
      'SELECT * FROM videos WHERE chapter_id = ? ORDER BY id',
      [chapterId]
    );

    // Get tests for this chapter
    const [tests] = await pool.query(
      'SELECT * FROM tests WHERE chapter_id = ? ORDER BY id',
      [chapterId]
    );

    // Create PDF document
    const doc = new PDFDocument({ margin: 50 });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="notes-${chapter.title.replace(/\s+/g, '-')}.pdf"`);

    // Pipe PDF to response
    doc.pipe(res);

    // Header
    doc.fontSize(24).font('Helvetica-Bold').fillColor('#1a56db').text('MahaLearn', { align: 'center' });
    doc.fontSize(14).font('Helvetica').fillColor('gray').text('Study Notes', { align: 'center' });
    doc.moveDown(2);

    // Chapter title
    doc.fontSize(20).font('Helvetica-Bold').fillColor('black').text(chapter.title);
    doc.moveDown(0.5);

    // Chapter info
    doc.fontSize(12).font('Helvetica').fillColor('gray')
      .text(`Subject: ${chapter.subject_name} | Standard: ${chapter.standard}`);
    doc.moveDown();

    // Description
    if (chapter.description) {
      doc.fillColor('black').fontSize(12).font('Helvetica')
        .text(chapter.description, { align: 'justify' });
      doc.moveDown();
    }

    // Videos section
    if (videos.length > 0) {
      doc.addPage();
      doc.fontSize(16).font('Helvetica-Bold').fillColor('#1a56db').text('📹 Video Lessons', { underline: true });
      doc.moveDown();

      videos.forEach((video, index) => {
        doc.fontSize(14).font('Helvetica-Bold').fillColor('black')
          .text(`${index + 1}. ${video.title}`);
        doc.moveDown(0.3);

        if (video.description) {
          doc.fontSize(11).font('Helvetica').fillColor('#374151')
            .text(video.description, { indent: 20, align: 'justify' });
          doc.moveDown(0.3);
        }

        if (video.duration_minutes) {
          doc.fontSize(10).fillColor('gray')
            .text(`Duration: ${video.duration_minutes} minutes`, { indent: 20 });
        }

        if (video.url) {
          doc.fontSize(10).fillColor('blue')
            .text(`Watch: ${video.url}`, { indent: 20, link: video.url });
        }

        doc.moveDown();
      });
    }

    // Tests section
    if (tests.length > 0) {
      doc.addPage();
      doc.fontSize(16).font('Helvetica-Bold').fillColor('#1a56db').text('📝 Practice Tests', { underline: true });
      doc.moveDown();

      tests.forEach((test, index) => {
        doc.fontSize(14).font('Helvetica-Bold').fillColor('black')
          .text(`${index + 1}. ${test.title}`);
        doc.moveDown(0.3);

        if (test.description) {
          doc.fontSize(11).font('Helvetica').fillColor('#374151')
            .text(test.description, { indent: 20, align: 'justify' });
          doc.moveDown(0.3);
        }

        doc.fontSize(10).fillColor('gray')
          .text(`Total Questions: ${test.total_questions || 'N/A'} | Total Marks: ${test.total_marks || 'N/A'} | Duration: ${test.duration_minutes || 'N/A'} minutes`, { indent: 20 });

        doc.moveDown();
      });
    }

    // Key Learning Points
    doc.addPage();
    doc.fontSize(16).font('Helvetica-Bold').fillColor('#1a56db').text('💡 Key Learning Points', { underline: true });
    doc.moveDown();

    const keyPoints = [
      `Master the ${chapter.title} chapter through systematic study and practice.`,
      `Watch all ${videos.length} video lessons carefully and take detailed notes.`,
      `Complete all ${tests.length} practice tests to assess your understanding.`,
      'Make summary notes in your own words for better retention.',
      'Discuss any doubts with your teacher immediately.',
      'Practice additional problems from your textbook.',
      'Revise regularly to strengthen your concepts.'
    ];

    keyPoints.forEach((point, index) => {
      doc.fontSize(12).font('Helvetica').fillColor('black')
        .text(`${index + 1}. ${point}`, { indent: 20, align: 'justify' });
      doc.moveDown(0.4);
    });

    // Study Tips
    doc.moveDown();
    doc.fontSize(16).font('Helvetica-Bold').fillColor('#1a56db').text('✨ Study Tips & Best Practices', { underline: true });
    doc.moveDown();

    const studyTips = [
      'Create mind maps to visualize connections between concepts',
      'Set specific daily study goals and track your progress',
      'Use flashcards for memorizing important terms and formulas',
      'Form study groups with classmates for collaborative learning',
      'Take regular 10-minute breaks every hour',
      'Practice active recall instead of passive reading',
      'Solve previous years\' question papers',
      'Stay positive and maintain a consistent study routine'
    ];

    studyTips.forEach((tip) => {
      doc.fontSize(12).font('Helvetica').fillColor('black')
        .text(`• ${tip}`, { indent: 20 });
      doc.moveDown(0.4);
    });

    // Footer
    doc.moveDown(2);
    doc.fontSize(10).fillColor('gray').font('Helvetica-Oblique')
      .text('─'.repeat(60), { align: 'center' });
    doc.moveDown(0.3);
    doc.text('Generated by MahaLearn - Smart Learning Platform', { align: 'center' });
    doc.text(`Maharashtra Board | Standard ${chapter.standard} | ${chapter.subject_name}`, { align: 'center' });
    doc.text(`Generated on: ${new Date().toLocaleDateString('en-IN')}`, { align: 'center' });

    // Finalize PDF
    doc.end();

  } catch (error) {
    console.error('Generate chapter notes error:', error);
    if (!res.headersSent) {
      res.status(500).json({ 
        success: false, 
        message: 'Failed to generate chapter notes', 
        error: error.message 
      });
    }
  }
};
